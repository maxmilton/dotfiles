" https://github.com/mjswensen/dotfiles/blob/master/.vimrc

""""""""
" Plug "
""""""""

call plug#begin('~/.vim/plugged')

" File/session management
Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'jremmen/vim-ripgrep', { 'on': 'Rg' }
"Plug 'xolox/vim-misc'
"Plug 'xolox/vim-session'
"Plug 'wesQ3/vim-windowswap'

" Syntax and linting
Plug 'sheerun/vim-polyglot'
Plug 'vim-syntastic/syntastic'
"Plug 'editorconfig/editorconfig-vim'
"Plug 'chrisbra/Colorizer', { 'on': 'ColorHighlight' }
"Plug 'mattn/emmet-vim'
Plug 'prettier/vim-prettier', {
  \ 'do': 'pnpm install --frozen-lockfile --prod',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html']
  \ }

" Git
"Plug 'tpope/vim-fugitive'
"Plug 'gregsexton/gitv', { 'on': 'Gitv' }
Plug 'airblade/vim-gitgutter'

" Session
"Plug 'christoomey/vim-tmux-navigator'

" Status line
Plug 'itchyny/lightline.vim'

" REST
"Plug 'diepm/vim-rest-console', { 'for': 'rest' }

" Misc
"Plug 'andrewradev/linediff.vim'
Plug 'easymotion/vim-easymotion'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

call plug#end()

"""""""""""""""""""
" Plugin settings "
"""""""""""""""""""

" NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nnoremap <leader>p :NERDTreeFind<cr>
let NERDTreeMapOpenVSplit = 'v'
let NERDTreeMapOpenSplit = 's'

" CtrlP
if executable('rg')
  " Command to get list of all files for fuzzy matching.
  let g:ctrlp_user_command = 'rg --files-with-matches --color never --fixed-strings --hidden "" %s'
endif

" fzy
if executable('fzy') && executable('rg')
  function! FzyCommand(choice_command, vim_command)
    let output = system(a:choice_command . " | fzy ")
    redraw!
    if v:shell_error == 0 && !empty(output)
      exec a:vim_command . ' ' . output
    endif
  endfunction

  nnoremap <leader>e :call FzyCommand("rg --files-with-matches --color never --fixed-strings '' . 2> /dev/null", ":e")<cr>
  nnoremap <leader>v :call FzyCommand("rg --files-with-matches --color never --fixed-strings '' . 2> /dev/null", ":vs")<cr>
  nnoremap <leader>s :call FzyCommand("rg --files-with-matches --color never --fixed-strings '' . 2> /dev/null", ":sp")<cr>
  nnoremap <leader>t :call FzyCommand("rg --files-with-matches --color never --fixed-strings '' . 2> /dev/null", ":tabe")<cr>
endif

" Vim-session
"let g:session_autoload = 'no'
"let g:session_autosave = 'no'

" Lightline
let g:lightline = {
  \ 'colorscheme': 'ThemerVimLightline',
  \ 'component': {
  \   'readonly': '%{&readonly?"":""}',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }

" TypeScript
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']

" Prettier
let g:prettier#config#trailing_comma = 'es5'

"""""""""""""""""
" Custom config "
"""""""""""""""""

syntax on
set background=dark
colorscheme ThemerVim

set backspace=indent,eol,start
set autoindent
set number
set cursorline
set history=50
set ruler
set showcmd
set showmode
set scrolloff=15
set textwidth=0
set formatoptions=tcronj
set laststatus=2
set nowrap
set ttimeoutlen=0
set ignorecase
set expandtab

set foldmethod=indent
set nofoldenable
set noswapfile

set shiftwidth=2
set softtabstop=2

" defaults from nvim
set autoread
set display=lastline
set encoding=utf-8
set hlsearch
set incsearch
set langnoremap
set listchars=tab:>-,trail:-,nbsp:+
set wildmenu

" https://github.com/neoclide/coc.nvim
set updatetime=300
inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#next(1): CheckBackspace() ? "\<Tab>" : coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" turn off background color erase
set t_ut=

" allows for quick editing of a different file in the same directory.
cabbr <expr> %% expand('%:p:h')

" expand two newlines and start typing between them
nnoremap <Leader>o i<CR><Esc>O

" rounding utility
"function! RoundTo(n_digits)
"  exec ':s/\d\+\.\d\{'.a:n_digits.',}/\=printf("%.'.a:n_digits.'f",str2float(submatch(0)))/g'
"endfunc

" show highlight groups, from https://jordanelver.co.uk/blog/2015/05/27/working-with-vim-colorschemes/
"nmap <leader>sp :call <SID>SynStack()<CR>
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc

""""""""""""""
" True color "
""""""""""""""

if has('termguicolors') " used starting nvim 0.1.5
  set termguicolors
else
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

""""""""""""""
" File types "
""""""""""""""

au BufRead,BufNewFile *.svelte setfiletype html
au BufRead,BufNewFile *.xcss setfiletype scss
