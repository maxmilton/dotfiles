# FISH GLOBALS & ALIASES
#
# Fish compiles and saves these commands so they only need to be called once
# initially and after any change to this file.

# update completions
fish_update_completions

# remove universal variables to start afresh -- NOTE: This is destructive!
mv "$HOME"/.config/fish/fish_variables "$HOME"/.config/fish/fish_variables-(date --iso-8601=minutes).bak
# set arbitrary var to initialise `fish_variables` file
set -U fish_user_paths

# FIXME: Destroying the universal vars breaks fisher and fisher plugins
#   ↳ Requires manually removing all plugin files and reinstalling fisher and plugins :(
#   ↳ https://github.com/jorgebucaran/fisher/issues/611

# disable welcome message
set -U fish_greeting

# theme
# FIXME: Tweak/use these or remove
## set -U fish_color_autosuggestion 555 brblack
## set -U fish_color_cancel -r
## set -U fish_color_command --bold
## set -U fish_color_comment red
## set -U fish_color_cwd green
## set -U fish_color_cwd_root red
## set -U fish_color_end brmagenta
## set -U fish_color_error brred
## set -U fish_color_escape bryellow --bold
## set -U fish_color_history_current --bold
## set -U fish_color_host normal
## set -U fish_color_match --background=brblue
## set -U fish_color_normal normal
## set -U fish_color_operator bryellow
## set -U fish_color_param cyan
## set -U fish_color_quote yellow
## set -U fish_color_redirection brblue
## set -U fish_color_search_match bryellow --background=brblack
## set -U fish_color_selection white --bold --background=brblack
## set -U fish_color_status red
## set -U fish_color_user brgreen
## set -U fish_color_valid_path --underline
## set -U fish_pager_color_completion \x1d
## set -U fish_pager_color_description B3A06D yellow
## set -U fish_pager_color_prefix white --bold --underline
## set -U fish_pager_color_progress brwhite --background=cyan

set -U fish_color_autosuggestion yellow
set -U fish_color_error brred
set -U hydro_color_prompt magenta

print_fish_colors

# NEO_VIM = <3
set -Ux EDITOR nvim
set -Ux VISUAL nvim
set -Ux GIT_EDITOR 'nvim +startinsert'

set -Ux RIPGREP_CONFIG_PATH "$HOME"/.ripgreprc

set -Ux MANPAGER "sh -c 'col -bx | bat -l man -p'"

{{- if eq .chezmoi.os "darwin" }}
# macOS
fish_add_path "$HOME"/.nix-profile/bin /nix/var/nix/profiles/default/bin
{{- end }}

# Node.js
set node_bin_path "$HOME"/.config/yarn/global/node_modules/.bin
if test -d $node_bin_path
  fish_add_path $node_bin_path
  # Only useful for yarn monorepos with link: protocol symlinks. Breaks pnpm monorepos!!
  #set -Ux NODE_PRESERVE_SYMLINKS 1
end

# Rust
set rust_bin_path "$HOME"/.cargo/bin
if test -d $rust_bin_path
  fish_add_path $rust_bin_path
end

# Misc
abbr --add C 'math' # CLI calculator
#abbr --add get 'aria2c --optimize-concurrent-downloads --dir ~/Downloads' # download via CLI
abbr --add ppp 'up_system; up_flatpak; up_docker; up_hosts; up_nodejs; up_fish' # run full system update
abbr --add p 'yay' # Arch Linux package manager
abbr --add f 'flatpak' # generic app image manager
abbr --add x 'chezmoi' # dotfiles manager
abbr --add xs 'chezmoi status'
abbr --add xd 'chezmoi diff'
abbr --add xa 'chezmoi apply -v'
abbr --add xu 'chezmoi update -v'
abbr --add fu 'fish ~/.config/fish/oneshot-config.fish'
abbr --add hh 'history --merge'

# Common tool replacements
abbr --add vi nvim
abbr --add vim nvim
abbr --add vimdiff 'nvim -d'
abbr --add cat bat
abbr --add catt 'bat --plain'
abbr --add ls exa
abbr --add find fd
abbr --add grep rg
abbr --add fdi 'fd --no-ignore --hidden'
abbr --add rr 'clr; rg --no-ignore'
abbr --add rrr 'clr; rg --context 3 --max-columns 80 --max-columns-preview'

# System
abbr --add s 'sudo -i'
abbr --add man 'man -a'
abbr --add .. 'cd ..'
abbr --add ... 'cd ../..'
abbr --add .... 'cd ../../..'
abbr --add ..... 'cd ../../../..'
abbr --add ...... 'cd ../../../../..'
abbr --add ....... 'cd ../../../../../..'
abbr --add -- - 'cd --' # single dash to go back to previous dir
abbr --add cp 'cp -i'
abbr --add mv 'mv -i'
abbr --add l 'exa -lFa --group-directories-first'
abbr --add ll 'exa -lFa --bytes --group-directories-first'
abbr --add lll 'exa -lFa'
abbr --add ld 'exa --tree --only-dirs'
abbr --add dux 'du -bh | sort -h'
abbr --add dus 'du --block-size=MiB --max-depth=1 | sort -n'
abbr --add b 'broot -s'
abbr --add 755 'fd --type directory --hidden --exec chmod 755 {}'
abbr --add 644 'fd --type file --hidden --exclude \'*.sh\' --exec chmod 644 {}'
# also exclude all files with executable permissions
abbr --add 644e 'find -O3 . -type d -name .git -prune -o -type f ! -name "*.sh" ! -executable -exec chmod 644 {} \;'

# Sysadmin
abbr --add scs 'sc status' # systemctl
abbr --add scr 'sc restart'
abbr --add curl "curl -vv -H 'Cache-Control: no-cache'"
abbr --add netinfo 'curl https://ifconfig.me/all'
abbr --add kk 'kill_process'
abbr --add kkk 'kill_process --tcp'
# remove broken symlinks in dir
abbr --add rmln 'find -L . -name . -o -type d -prune -o -type l -exec /bin/rm -rf {} \;'
# remove node_modules dirs recursively
abbr --add rmnm 'fd --type directory --hidden --no-ignore-vcs --exec /bin/rm -rf {} \; node_modules .'
# remove yarn-error.log files recursively
#abbr --add rmye 'fd --type file --hidden --exec /bin/rm -rf {} \; yarn-error.log .'
{{- if eq .chezmoi.os "linux" }}
# list open ports
abbr --add lsport 'echo -n; and sudo ss -plantu | fzy --lines=max'
{{- else }}
# list open ports (on BSD/macOS)
abbr --add lsport 'sudo lsof -iTCP -sTCP:LISTEN -n -P'
{{- end }}
# debug bash script
abbr --add bashx 'env PS4="\$(if [[ \$? == 0 ]]; then echo \"\033[0;33mEXIT: \$? ✔\"; else echo \"\033[1;91mEXIT: \$? ❌\033[0;33m\"; fi)\n\nSTACK:\n\${BASH_SOURCE[0]}:\${LINENO}\n\${BASH_SOURCE[*]:1}\n\033[0m" bash -x'

# Net tools
#abbr --add nt 'docker run --rm -ti --network=host --volume="$PWD":/data ghcr.io/maxmilton/net-tools'
abbr --add get 'docker run --rm -ti --volume="$HOME"/Downloads:/data --user=(id -u):(id -g) ghcr.io/maxmilton/net-tools aria2c --dir /data'
abbr --add curl 'docker run --rm -ti --network=host --volume="$HOME"/.curlrc:/root/.curlrc ghcr.io/maxmilton/net-tools curl'
#abbr --add darkhttpd 'docker run -d --network=host --volume="$PWD":/data ghcr.io/maxmilton/net-tools darkhttpd'
#abbr --add darkstat 'docker run --rm --network=host ghcr.io/maxmilton/net-tools darkstat'
abbr --add drill 'docker run --rm ghcr.io/maxmilton/net-tools drill'
abbr --add htop 'docker run --rm -ti --pid=host --volume="$HOME"/.config/htop/htoprc:/root/.config/htop/htoprc ghcr.io/maxmilton/net-tools htop'
#abbr --add iperf 'docker run --rm -ti --network=host ghcr.io/maxmilton/net-tools iperf'
abbr --add jq 'docker run --rm -i ghcr.io/maxmilton/net-tools jq'
#abbr --add mtr 'docker run --rm -ti ghcr.io/maxmilton/net-tools mtr'
abbr --add nmap 'docker run --rm -ti --network=host ghcr.io/maxmilton/net-tools nmap'
abbr --add ncat 'docker run --rm -ti --network=host --init ghcr.io/maxmilton/net-tools ncat'
#abbr --add nping 'docker run --rm -ti --network=host ghcr.io/maxmilton/net-tools nping'
abbr --add ping 'docker run --rm -ti --network=host ghcr.io/maxmilton/net-tools nping'
abbr --add nq 'docker run --rm -i --volume="$PWD":/data -e NQDIR=/data ghcr.io/maxmilton/net-tools nq'
abbr --add fq 'docker run --rm -i --volume="$PWD":/data -e NQDIR=/data ghcr.io/maxmilton/net-tools fq'
#abbr --add rsync 'docker run --rm -i --volume="$HOME"/.ssh:/root/.ssh:ro ghcr.io/maxmilton/net-tools rsync'
#abbr --add ssh 'docker run --rm -ti --volume="$HOME"/.ssh:/root/.ssh:ro --volume="$PWD":/data ghcr.io/maxmilton/net-tools ssh'
#abbr --add sftp 'docker run --rm -i --volume="$HOME"/.ssh:/root/.ssh:ro ghcr.io/maxmilton/net-tools sftp'
#abbr --add scp 'docker run --rm -i --volume="$HOME"/.ssh:/root/.ssh:ro ghcr.io/maxmilton/net-tools scp'
#abbr --add tcpdump 'docker run --rm -i --network=host ghcr.io/maxmilton/net-tools tcpdump'
abbr --add whois 'docker run --rm ghcr.io/maxmilton/net-tools whois'

# Docker
abbr --add d 'docker'
abbr --add dcc 'docker-compose'
abbr --add di 'docker images'
abbr --add drm 'docker system prune'
# show containers
abbr --add dps "docker ps -a --format {{"'table {{.Names}}\t{{.Image}}\t{{.Status}}'"}}"
abbr --add dpss "docker ps -q | xargs docker inspect --format {{"'{{.Config.Hostname}} - {{.Name}} - {{.NetworkSettings.IPAddress}}'"}}"
# monitor all containers
abbr --add ds 'docker stats (docker ps -q)'
abbr --add dr 'docker run --rm -ti'
abbr --add drr 'docker run --rm -ti ghcr.io/maxmilton/alpine:edge sh'
abbr --add dp 'docker pull'
# get latest container ID
abbr --add dl 'docker ps -l -q'
# get container IP
abbr --add dip "docker inspect --format '{{"{{"}} .NetworkSettings.IPAddress {{"}}"}}'"
# remove orphaned volumes
#abbr --add drmv 'docker volume ls -qf dangling=true | xargs -r docker volume rm'
# get shell in host via docker
#abbr --add dnse 'docker run -it --rm --privileged --pid=host justincormack/nsenter1'

# Development
abbr --add y 'yarn'
abbr --add yy 'clr; yarn'
abbr --add yu 'yarn upgrade-interactive --latest'
abbr --add yr 'npx yarn-deduplicate && /bin/rm ./node_modules/.yarn-integrity && yarn'
abbr --add yrr '/bin/rm -rf yarn.lock **/node_modules; yarn'
abbr --add yrrr '/bin/rm -rf yarn.lock **/{dist,node_modules}; yarn'
abbr --add yb 'yarn run build'
abbr --add yyb 'clr; yarn run build'
abbr --add yt 'yarn run lint; and yarn run test'
abbr --add yyt 'clr; yarn run lint; and yarn run test'
abbr --add ys 'yarn run serve'
abbr --add yys 'clr; yarn run serve'
abbr --add yi 'yarn info'
abbr --add j 'pnpm'
abbr --add jj 'clr; pnpm'
abbr --add ju 'pnpm upgrade --interactive --latest -r'
abbr --add ji 'pnpm install --prefer-frozen-lockfile=false'
abbr --add jr '/bin/rm pnpm-lock.yaml; and pnpm install'
abbr --add jrr '/bin/rm -rf pnpm-lock.yaml **/node_modules; pnpm install'
abbr --add jrrr '/bin/rm -rf pnpm-lock.yaml **/{dist,node_modules}; pnpm install'
abbr --add jb 'pnpm run build'
abbr --add jjb 'clr; pnpm run build'
abbr --add jt 'pnpm run lint; and pnpm run test'
abbr --add jjt 'clr; pnpm run lint; and pnpm run test'
abbr --add jtt 'pnpm run test-e2e'
abbr --add js 'pnpm run serve'
abbr --add jjs 'clr; pnpm run serve'
abbr --add jii 'pnpm info'

# Git
abbr --add g 'git'
# edit all files with changes
abbr --add ge 'vim -p (git diff --name-only)'
abbr --add gs 'git status --short --branch --show-stash'
abbr --add gp 'git pull --prune'
abbr --add gps 'git pull --prune --autostash'
# 1. Configure upstream remote - ref: https://help.github.com/articles/configuring-a-remote-for-a-fork/
#  ↳ git remote add upstream <repo>
# 2. Sync fork with upstream: run gpp - ref: https://help.github.com/articles/syncing-a-fork/
abbr --add gpp 'git fetch upstream; and git merge upstream/master master; and git push origin master'
abbr --add gl "git log --graph --pretty=format:'%C(yellow)%h%Creset%C(blue)%d%Creset %C(white bold)%s%Creset %C(white dim)(by %an %ar)%Creset'"
abbr --add gll 'git log --oneline -n 40'
abbr --add glll 'git log --graph --abbrev-commit --date=relative'
abbr --add ga 'git add'
abbr --add gd 'git diff'
abbr --add gdt 'git difftool'
abbr --add gdd 'git diff --staged'
# see changes in origin
abbr --add gpdo 'git diff master..origin/master'
# see changes in upstream
abbr --add gpdu 'git fetch upstream; git diff master..upstream/master'
# review changes from last pull
abbr --add gpd "git log --reverse --no-merges --stat '@{1}..'"
# see unpushed commits
abbr --add gout 'git log --stat "@{u}"..'
# see unpushed commits on all branches
abbr --add gouta 'git log --stat --branches --not --remotes'
# see unpulled commit
abbr --add gin 'git log --stat .."@{u}"'
abbr --add gc 'git commit --verbose'
abbr --add gca 'git commit --verbose --all'
abbr --add gco 'git checkout' # XXX: Better to use gg function
abbr --add ggg 'git checkout (git branch --all --format "%(refname:lstrip=2)" | fzy --lines max)'
abbr --add gb 'git branch --all'
abbr --add gm 'git merge'
abbr --add gt 'git tag'
# remove missing files
abbr --add grm 'git ls-files --deleted -z | xargs -0 git rm'

# Google Cloud SDK
#abbr --add gcloud_instances 'gcloud compute instances list --project wearegenkicom'
